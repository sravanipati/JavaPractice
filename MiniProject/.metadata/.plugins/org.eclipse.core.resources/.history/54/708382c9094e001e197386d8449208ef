package com.alacriti.paymentgateway.simulator.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Random;

import org.springframework.stereotype.Component;

import com.alacriti.paymentgateway.simulator.model.CheckPaymentStatusResponse;
import com.alacriti.paymentgateway.simulator.model.Merchant;
import com.alacriti.paymentgateway.simulator.model.MerchantPaymentRequest;
import com.alacriti.paymentgateway.simulator.model.MerchantPaymentResponse;
import com.alacriti.paymentgateway.simulator.model.MerchantResponse;

@Component
public class PaymentGatewayDao {
	PreparedStatement pstmt = null;

	public boolean merchantExists(Connection conn, String merchantId) throws SQLException {
		String query = "SELECT COUNT(*) FROM merchant_tbl WHERE merchant_id = ?";
		pstmt = conn.prepareStatement(query);
		try {
			pstmt.setString(1, merchantId);
			try (ResultSet rs = pstmt.executeQuery()) {
				if (rs.next()) {
					int count = rs.getInt(1);
					return count > 0;
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	public MerchantResponse addMerchant(Connection conn, Merchant merchant) throws SQLException {
		String query = "insert into merchant_tbl(merchant_id,name,email,business_type,address,phone)values(?,?,?,?,?,?)";
		
		MerchantResponse merchantResponse = null;
//		if (merchantExists(conn, merchant.getMerchantId())) {
//			throw new SQLException("Merchant with the same merchantId already exists.");
//		}

		try {
			merchantResponse = new MerchantResponse();
			
			if(exists) {
				merchantResponse.setSuccess(false);
				merchantResponse.setMessage("Merchant with the same merchantId already exists.");
			}
			else {
				merchantResponse.setSuccess(true);
				merchantResponse.setMessage("Merchant added successfully.");
			}
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, merchant.getMerchantId());
			pstmt.setString(2, merchant.getName());
			pstmt.setString(3, merchant.getEmail());
			pstmt.setString(4, merchant.getBussinessType());
			pstmt.setString(5, merchant.getAddress());
			pstmt.setString(6, merchant.getPhone());
			
			pstmt.execute();
//			int rowsAffected = pstmt.executeUpdate();
//			if (rowsAffected != 1) {
//				throw new SQLException("Failed to add merchant.");
//			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			pstmt.close();
			conn.close();
		}

		return merchantResponse;

	}

	public MerchantPaymentResponse addPayment(Connection conn, MerchantPaymentRequest paymentRequest)
			throws SQLException {
		MerchantPaymentResponse paymentResponse = null;
		String query = "insert into payments_tbl(payment_id,merchant_id,amount,currency,order_id,payment_status)values(?,?,?,?,?,?)";
		try {
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, paymentRequest.getPaymentId());
			pstmt.setString(2, paymentRequest.getPayment().getMerchantId());
			pstmt.setDouble(3, paymentRequest.getPayment().getAmount());
			pstmt.setString(4, paymentRequest.getPayment().getCurrency());
			pstmt.setString(5, paymentRequest.getPayment().getOrderId());

			paymentResponse = new MerchantPaymentResponse();

			Random random = new Random();
			int randomNumber = random.nextInt();
			if (randomNumber % 2 == 0) {
				pstmt.setString(6, "Success");
				paymentResponse.setPaymentStatus("Success");
				paymentResponse.setPaymentId(paymentRequest.getPaymentId());
			} else {
				pstmt.setString(6, "Failed");
				paymentResponse.setPaymentStatus("Failed");
				paymentResponse.setPaymentId(paymentRequest.getPaymentId());
			}
			pstmt.execute();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			pstmt.close();
			conn.close();
		}
		return paymentResponse;

	}

	public CheckPaymentStatusResponse getPaymentStatusForPaymentId(Connection conn, String paymentId)
			throws SQLException {
		String query = "select payment_status from payments_tbl where payment_id=?";
		CheckPaymentStatusResponse paymentStatus = null;
		try {
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, paymentId);
			ResultSet rs = pstmt.executeQuery();

			while (rs.next()) {
				paymentStatus = new CheckPaymentStatusResponse();
				paymentStatus.setPaymentStatus(rs.getString(1));

			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			pstmt.close();
			conn.close();
		}
		return paymentStatus;
	}

}
